Filtered_county_2021 <- PM2.5_2021 %>% filter(County.Name %in% common_county_names)
Filtered_county_2022 <- PM2.5_2022 %>% filter(County.Name %in% common_county_names)
Filtered_county_energy <- energy_data %>% filter(`Plant county name` %in% common_county_names)
Filtered_county_energy <- Filtered_county_energy %>%
rename(County.Name = `Plant county name`)
combined_df <- bind_rows(Filtered_county_2016, Filtered_county_2018, Filtered_county_2019, Filtered_county_2020, Filtered_county_2021, Filtered_county_2022) %>%
arrange(County.Name, Year)
County_PM2.5_Energy_Data <- merge(combined_df, Filtered_county_energy, by = c("County.Name", "Year"))
PM2.5 <- County_PM2.5_Energy_Data$PM2.5_Avg
NonRenewableEnergy <- County_PM2.5_Energy_Data$`Plant annual total nonrenewables net generation (MWh)`
RenewableEnergy <- County_PM2.5_Energy_Data$`Plant annual total renewables net generation (MWh)`
CountyName <- County_PM2.5_Energy_Data$County.Name
Total_Energy <- lm(PM2.5 ~ NonRenewableEnergy + RenewableEnergy + factor(CountyName))
summary(Total_Energy)
ggplot()+
geom_point(aes(x= NonRenewableEnergy, y= PM2.5))+
geom_smooth(aes(x= NonRenewableEnergy, y= PM2.5))
ggplot()+
geom_point(aes(x= RenewableEnergy, y= PM2.5))+
geom_smooth(aes(x= RenewableEnergy, y= PM2.5))
PM2.5 <- County_PM2.5_Energy_Data$PM2.5_Avg
Coal <- County_PM2.5_Energy_Data$`Plant annual coal net generation (MWh)`
Oil <- County_PM2.5_Energy_Data$`Plant annual oil net generation (MWh)`
NGas <- County_PM2.5_Energy_Data$`Plant annual gas net generation (MWh)`
Nuclear <- County_PM2.5_Energy_Data$`Plant annual nuclear net generation (MWh)`
Hydro <- County_PM2.5_Energy_Data$`Plant annual biomass net generation (MWh)`
Wind <- County_PM2.5_Energy_Data$`Plant annual wind net generation (MWh)`
Biomass <- County_PM2.5_Energy_Data$`Plant annual biomass net generation (MWh)`
Solar <- County_PM2.5_Energy_Data$`Plant annual solar net generation (MWh)`
Geothermal <- County_PM2.5_Energy_Data$`Plant annual geothermal net generation (MWh)`
CountyName <- County_PM2.5_Energy_Data$County.Name
Source_Energy <- lm(PM2.5 ~ Coal + Oil + NGas + Nuclear + Hydro + Wind + Solar + Biomass + Geothermal + factor(CountyName))
summary(Source_Energy)
#Are we missing something? Literature tells us transportation is a very important contributor to PM2.5 emission. Let's narrow down to Pennsylvania's counties for now and check.
Transportation_2018<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2018.csv")
Transportation_2019<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2019.csv")
Transportation_2020<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2020.csv")
Transportation_2021<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2021.csv")
Transportation_2022<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2022.csv")
combined_transportation_df <- bind_rows(Transportation_2018, Transportation_2019, Transportation_2020, Transportation_2021, Transportation_2022) %>%
arrange(COUNTY, YEAR)
combined_transportation_df$COUNTY <- str_to_title(combined_transportation_df$COUNTY)
common_transportation_county_names <- Reduce(intersect, list(combined_transportation_df$COUNTY, combined_df$County.Name))
Filtered_transportation_df <- combined_transportation_df %>% filter(COUNTY %in% common_transportation_county_names)
Filtered_transportation_PM2.5_df <- combined_df %>%
filter(County.Name %in% common_transportation_county_names) %>%
filter(State.Name %in% c("Pennsylvania", "Ohio", "Texas", "Iowa", "Georgia", "New York")) %>%
filter(Year != 2016)
County_PM2.5_Transportation_Data <- merge(Filtered_transportation_df, Filtered_transportation_PM2.5_df,
c("County.Name", "Year"), c("COUNTY", "YEAR"))
# Trend of Cars in Allegheny County
ggplot(County_PM2.5_Transportation_Data %>%
filter(COUNTY == "Allegheny"),
aes(x = YEAR)) +
geom_line(aes(y = GAS/10^2, color = "GAS (hundreds)")) +
geom_line(aes(y = DIESEL/10, color = "DIESEL (tens)")) +
geom_line(aes(y = ELECTRIC, color = "ELECTRIC")) +
geom_line(aes(y = PROPANE, color = "PROPANE")) +
geom_line(aes(y = HYBRID, color = "HYBRID")) +
geom_line(aes(y = OTHER, color = "OTHER")) +
geom_line(aes(y = NATURAL.GAS, color = "NATURAL.GAS")) +
geom_line(aes(y = COMP.GAS, color = "COMP.GAS")) +
geom_line(aes(y = FLEX.FUEL, color = "FLEX.FUEL")) +
labs(title = "Change in number of Vehicles in PA",
x = "Year",
y = "Number of Vehicles",
color = "") +
theme_minimal()
PM2.5 <- County_PM2.5_Energy_Data$PM2.5_Avg
NonRenewableEnergy <- County_PM2.5_Energy_Data$`Plant annual total nonrenewables net generation (MWh)`/10^6
RenewableEnergy <- County_PM2.5_Energy_Data$`Plant annual total renewables net generation (MWh)`/10^6
CountyName <- County_PM2.5_Energy_Data$County.Name
Year <- County_PM2.5_Energy_Data$Year
Total_Energy <- lm(PM2.5 ~ NonRenewableEnergy + RenewableEnergy + Geothermal + factor(Year) + factor(CountyName))
summary(Total_Energy)
ggplot()+
geom_point(aes(x= NonRenewableEnergy, y= PM2.5))+
geom_smooth(aes(x= NonRenewableEnergy, y= PM2.5))
ggplot()+
geom_point(aes(x= RenewableEnergy, y= PM2.5))+
geom_smooth(aes(x= RenewableEnergy, y= PM2.5))
PM2.5 <- County_PM2.5_Energy_Data$PM2.5_Avg
Coal <- County_PM2.5_Energy_Data$`Plant annual coal net generation (MWh)`/10^6
Oil <- County_PM2.5_Energy_Data$`Plant annual oil net generation (MWh)`/10^6
NGas <- County_PM2.5_Energy_Data$`Plant annual gas net generation (MWh)`/10^6
Nuclear <- County_PM2.5_Energy_Data$`Plant annual nuclear net generation (MWh)`/10^6
Hydro <- County_PM2.5_Energy_Data$`Plant annual biomass net generation (MWh)`/10^6
Wind <- County_PM2.5_Energy_Data$`Plant annual wind net generation (MWh)`/10^6
Biomass <- County_PM2.5_Energy_Data$`Plant annual biomass net generation (MWh)`/10^6
Solar <- County_PM2.5_Energy_Data$`Plant annual solar net generation (MWh)`/10^6
Geothermal <- County_PM2.5_Energy_Data$`Plant annual geothermal net generation (MWh)`/10^6
CountyName <- County_PM2.5_Energy_Data$County.Name
Source_Energy <- lm(PM2.5 ~ Geothermal + factor(Year)+ factor(CountyName))
summary(Source_Energy)
County_PM2.5_Energy_Data %>% filter(`Plant annual geothermal net generation (MWh)` > 0) %>% summary(`Plant annual geothermal net generation (MWh)`)
#Are we missing something? Literature tells us transportation is a very important contributor to PM2.5 emission. Let's narrow down to Pennsylvania's counties for now and check.
Transportation_2018<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2018.csv")
Transportation_2019<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2019.csv")
Transportation_2020<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2020.csv")
Transportation_2021<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2021.csv")
Transportation_2022<- read.csv("C:/Users/Harsh Vaibhav/Desktop/Data Science Data Sets/Final/Transporation Data/tabula-ReportofRegistration2022.csv")
combined_transportation_df <- bind_rows(Transportation_2018, Transportation_2019, Transportation_2020, Transportation_2021, Transportation_2022) %>%
arrange(COUNTY, YEAR)
combined_transportation_df$COUNTY <- str_to_title(combined_transportation_df$COUNTY)
common_transportation_county_names <- Reduce(intersect, list(combined_transportation_df$COUNTY, combined_df$County.Name))
Filtered_transportation_df <- combined_transportation_df %>% filter(COUNTY %in% common_transportation_county_names)
Filtered_transportation_PM2.5_df <- combined_df %>%
filter(County.Name %in% common_transportation_county_names) %>%
filter(State.Name %in% c("Pennsylvania", "Ohio", "Texas", "Iowa", "Georgia", "New York")) %>%
filter(Year != 2016)
County_PM2.5_Transportation_Data <- merge(Filtered_transportation_df, Filtered_transportation_PM2.5_df,
c("County.Name", "Year"), c("COUNTY", "YEAR"))
# Trend of Cars in Allegheny County
ggplot(County_PM2.5_Transportation_Data %>%
filter(COUNTY == "Allegheny"),
aes(x = YEAR)) +
geom_line(aes(y = GAS/10^2, color = "GAS (hundreds)")) +
geom_line(aes(y = DIESEL/10, color = "DIESEL (tens)")) +
geom_line(aes(y = ELECTRIC, color = "ELECTRIC")) +
geom_line(aes(y = PROPANE, color = "PROPANE")) +
geom_line(aes(y = HYBRID, color = "HYBRID")) +
geom_line(aes(y = OTHER, color = "OTHER")) +
geom_line(aes(y = NATURAL.GAS, color = "NATURAL.GAS")) +
geom_line(aes(y = COMP.GAS, color = "COMP.GAS")) +
geom_line(aes(y = FLEX.FUEL, color = "FLEX.FUEL")) +
labs(title = "Change in number of Vehicles in PA",
x = "Year",
y = "Number of Vehicles",
color = "") +
theme_minimal()
PM2.5_Avg <- County_PM2.5_Transportation_Data$PM2.5_Avg
Gas <- County_PM2.5_Transportation_Data$GAS
Diesel <- County_PM2.5_Transportation_Data$DIESEL
Electric <- County_PM2.5_Transportation_Data$ELECTRIC
Propane <- County_PM2.5_Transportation_Data$PROPANE
Hybrid <- County_PM2.5_Transportation_Data$HYBRID
NaturalGas <- County_PM2.5_Transportation_Data$NATURAL.GAS
CompGas <- County_PM2.5_Transportation_Data$COMP.GAS
FlexFuel <- County_PM2.5_Transportation_Data$FLEX.FUEL
Vehicles <- County_PM2.5_Transportation_Data$VEHICLES
PACounty <- County_PM2.5_Transportation_Data$COUNTY
Year <- County_PM2.5_Transportation_Data$YEAR
# Fit the linear regression model
emission_significance_transport <- lm(PM2.5_Avg ~ Diesel + factor(PACounty) + factor (Year), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
emission_significance_transport <- lm(PM2.5_Avg ~ Gas + Diesel + Electric + Propane + Hybrid + NaturalGas + CompGas + FlexFuel + factor(PACounty), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
# Set seed for reproducibility
set.seed(123)
# Generate random indices for splitting data into train and test sets
train_indices <- sample(1:nrow(County_PM2.5_Transportation_Data), 0.8 * nrow(County_PM2.5_Transportation_Data))
# Create train and test data sets
train_data <- County_PM2.5_Transportation_Data[train_indices, ]
test_data <- County_PM2.5_Transportation_Data[-train_indices, ]
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set
AllVehicles <- lm(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR), data = train_data)
summary(AllVehicles)
# Calculate MSE
predicted_PM2.5_allvehicles <- predict(AllVehicles, newdata = test_data)
mse_allegheny_all <- mean((predicted_PM2.5_allvehicles - test_data$PM2.5_Avg)^2)
print(mse_allegheny_all)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES = c(855788, 855789), COUNTY = "Allegheny"))
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES = c(855788, 855789), COUNTY = "Allegheny"))
# Train the model on the entire data-set
AllVehicles <- lm(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR), data = train_data)
summary(AllVehicles)
# Calculate MSE
predicted_PM2.5_allvehicles <- predict(AllVehicles, newdata = test_data)
mse_allegheny_all <- mean((predicted_PM2.5_allvehicles - test_data$PM2.5_Avg)^2)
print(mse_allegheny_all)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES, COUNTY = "Allegheny", YEAR = "2022"))
# Train the model on the entire data-set
AllVehicles <- lm(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR), data = train_data)
summary(AllVehicles)
# Calculate MSE
predicted_PM2.5_allvehicles <- predict(AllVehicles, newdata = test_data)
mse_allegheny_all <- mean((predicted_PM2.5_allvehicles - test_data$PM2.5_Avg)^2)
print(mse_allegheny_all)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES = c(855788, 855789), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate PM2.5 values for an addition of 1 car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
PM2.5_Avg <- County_PM2.5_Transportation_Data$PM2.5_Avg
Gas <- County_PM2.5_Transportation_Data$GAS
Diesel <- County_PM2.5_Transportation_Data$DIESEL
Electric <- County_PM2.5_Transportation_Data$ELECTRIC
Propane <- County_PM2.5_Transportation_Data$PROPANE
Hybrid <- County_PM2.5_Transportation_Data$HYBRID
NaturalGas <- County_PM2.5_Transportation_Data$NATURAL.GAS
CompGas <- County_PM2.5_Transportation_Data$COMP.GAS
FlexFuel <- County_PM2.5_Transportation_Data$FLEX.FUEL
Vehicles <- County_PM2.5_Transportation_Data$VEHICLES
PACounty <- County_PM2.5_Transportation_Data$COUNTY
Year <- County_PM2.5_Transportation_Data$YEAR
# Fit the linear regression model
emission_significance_transport <- lm(PM2.5_Avg ~ Diesel + factor(PACounty) + factor (Year), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
emission_significance_transport <- lm(PM2.5_Avg ~ Gas + Diesel + Electric + Propane + Hybrid + NaturalGas + CompGas + FlexFuel + factor(PACounty), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
# Set seed for reproducibility
set.seed(123)
# Generate random indices for splitting data into train and test sets
train_indices <- sample(1:nrow(County_PM2.5_Transportation_Data), 0.8 * nrow(County_PM2.5_Transportation_Data))
# Create train and test data sets
train_data <- County_PM2.5_Transportation_Data[train_indices, ]
test_data <- County_PM2.5_Transportation_Data[-train_indices, ]
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set
AllVehicles <- lm(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR), data = train_data)
summary(AllVehicles)
# Calculate MSE
predicted_PM2.5_allvehicles <- predict(AllVehicles, newdata = test_data)
mse_allegheny_all <- mean((predicted_PM2.5_allvehicles - test_data$PM2.5_Avg)^2)
print(mse_allegheny_all)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES = c(855788, 855789), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate PM2.5 values for an addition of 1 car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
# Case 2: Looking specifically at Gas, Diesel and Electric Vehicles
# Train the model on the entire data-set
GDE <- lm(PM2.5_Avg ~ GAS + DIESEL + ELECTRIC + factor(COUNTY)+ factor(YEAR), data = train_data)
summary(GDE)
# Calculate MSE
predicted_PM2.5_allegheny_GDE <- predict(GDE, newdata = test_data)
mse_allegheny_GDE <- mean((predicted_PM2.5_allegheny_GDE - test_data$PM2.5_Avg)^2, na.rm=TRUE)
print(mse_allegheny_GDE)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(GDE, newdata = data.frame(GAS = c(811383, 811384), DIESEL = c(20091, 20092), ELECTRIC = c(4574,4575), COUNTY = "Allegheny"))
PM2.5_Avg <- County_PM2.5_Transportation_Data$PM2.5_Avg
Gas <- County_PM2.5_Transportation_Data$GAS
Diesel <- County_PM2.5_Transportation_Data$DIESEL
Electric <- County_PM2.5_Transportation_Data$ELECTRIC
Propane <- County_PM2.5_Transportation_Data$PROPANE
Hybrid <- County_PM2.5_Transportation_Data$HYBRID
NaturalGas <- County_PM2.5_Transportation_Data$NATURAL.GAS
CompGas <- County_PM2.5_Transportation_Data$COMP.GAS
FlexFuel <- County_PM2.5_Transportation_Data$FLEX.FUEL
Vehicles <- County_PM2.5_Transportation_Data$VEHICLES
PACounty <- County_PM2.5_Transportation_Data$COUNTY
Year <- County_PM2.5_Transportation_Data$YEAR
# Fit the linear regression model
emission_significance_transport <- lm(PM2.5_Avg ~ Diesel + factor(PACounty) + factor (Year), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
emission_significance_transport <- lm(PM2.5_Avg ~ Gas + Diesel + Electric + Propane + Hybrid + NaturalGas + CompGas + FlexFuel + factor(PACounty), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
# Set seed for reproducibility
set.seed(123)
# Generate random indices for splitting data into train and test sets
train_indices <- sample(1:nrow(County_PM2.5_Transportation_Data), 0.8 * nrow(County_PM2.5_Transportation_Data))
# Create train and test data sets
train_data <- County_PM2.5_Transportation_Data[train_indices, ]
test_data <- County_PM2.5_Transportation_Data[-train_indices, ]
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set
AllVehicles <- lm(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR), data = train_data)
summary(AllVehicles)
# Calculate MSE
predicted_PM2.5_allvehicles <- predict(AllVehicles, newdata = test_data)
mse_allegheny_all <- mean((predicted_PM2.5_allvehicles - test_data$PM2.5_Avg)^2)
print(mse_allegheny_all)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES = c(855788, 855789), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate PM2.5 values for an addition of 1 car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
# Case 2: Looking specifically at Gas, Diesel and Electric Vehicles
# Train the model on the entire data-set
GDE <- lm(PM2.5_Avg ~ GAS + DIESEL + ELECTRIC + factor(COUNTY)+ factor(YEAR), data = train_data)
summary(GDE)
# Calculate MSE
predicted_PM2.5_allegheny_GDE <- predict(GDE, newdata = test_data)
mse_allegheny_GDE <- mean((predicted_PM2.5_allegheny_GDE - test_data$PM2.5_Avg)^2, na.rm=TRUE)
print(mse_allegheny_GDE)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(GDE, newdata = data.frame(GAS = c(811383, 811384), DIESEL = c(20091, 20092), ELECTRIC = c(4574,4575), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate PM2.5 values for an addition of 1 gas, 1 diesel and 1 electric car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
# Case 3: Looking specifically at Diesel Vehicles
# Train the model on the entire data-set
Diesel_Cars <- lm(PM2.5_Avg ~ DIESEL + factor(COUNTY) + factor(YEAR), data = train_data)
summary(Diesel_Cars)
# Calculate MSE
predicted_PM2.5_allegheny_diesel <- predict(Diesel_Cars, newdata = test_data)
mse_allegheny_diesel <- mean((predicted_PM2.5_allegheny_diesel - test_data$PM2.5_Avg)^2)
print(mse_allegheny_diesel)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(Diesel_Cars, newdata = data.frame(DIESEL = c(20091, 20092), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate the difference between predicted PM2.5 values to get the PM2.5 for an addition of 1 diesel car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
# Visualizing Gas vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Gas), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Gas), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Gas vs. PM2.5_Avg", x = "Log(Gas)", y = "PM2.5_Avg")
# Visualizing Diesel vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Diesel), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Diesel), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Diesel vs. PM2.5_Avg", x = "Log(Diesel)", y = "PM2.5_Avg")
# Visualizing Electric vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Electric), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Electric), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Electric vs. PM2.5_Avg", x = "Log(Electric)", y = "PM2.5_Avg")
# Visualizing Vehicles vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Vehicles), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Vehicles), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Vehicles vs. PM2.5_Avg", x = "Log(Vehicles)", y = "PM2.5_Avg")
# Install and load the glmnet package
library(glmnet)
# Prepare the predictor matrix
x_all <- model.matrix(~ VEHICLES + factor(COUNTY) + factor(YEAR), data = County_PM2.5_Transportation_Data1)
# Install and load the glmnet package
library(glmnet)
County_PM2.5_Transportation_Data1 <- na.omit(County_PM2.5_Transportation_Data)
# Prepare the predictor matrix
x_all <- model.matrix(~ VEHICLES + factor(COUNTY) + factor(YEAR), data = County_PM2.5_Transportation_Data1)
y_all <- County_PM2.5_Transportation_Data1$PM2.5_Avg
# Perform cross-validated ridge regression
ridge_model_all <- cv.glmnet(x_all, y_all, alpha = 0)
best_lambda_all <- ridge_model_all$lambda.min
final_model_all <- glmnet(x_all, y_all, alpha = 0, lambda = best_lambda_all)
# Extract coefficients
coefficients_all <- coef(final_model_all)
# Predict PM2.5 levels
predicted_PM2.5_all <- predict(final_model_all, newx = x_all)
# Calculate mean squared error
mse_all <- mean((predicted_PM2.5_all - y_all)^2)
# Print results
print(coefficients_all)
print(mse_all)
#Carry out the same 3 cases as in the Linear Regression Model by changing features in the first line 511
#k-fold Cross validation
# Load the caret package
library(caret)
# Define the number of folds for cross-validation
num_folds <- 10
# Define the control parameters for cross-validation
train_control <- trainControl(method = "cv",   # Use k-fold cross-validation
number = num_folds)  # Number of folds
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set using k-fold cross-validation
AllVehicles_cv <- train(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(AllVehicles_cv)
# Case 2: Looking specifically at Gas, Diesel, and Electric Vehicles
# Train the model on the entire data-set using k-fold cross-validation
GDE_cv <- train(PM2.5_Avg ~ GAS + DIESEL + ELECTRIC + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
#k-fold Cross validation
# Load the caret package
library(caret)
County_PM2.5_Transportation_Data <- na.omit(County_PM2.5_Transportation_Data)
# Define the number of folds for cross-validation
num_folds <- 10
# Define the control parameters for cross-validation
train_control <- trainControl(method = "cv",   # Use k-fold cross-validation
number = num_folds)  # Number of folds
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set using k-fold cross-validation
AllVehicles_cv <- train(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(AllVehicles_cv)
# Case 2: Looking specifically at Gas, Diesel, and Electric Vehicles
# Train the model on the entire data-set using k-fold cross-validation
GDE_cv <- train(PM2.5_Avg ~ GAS + DIESEL + ELECTRIC + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(GDE_cv)
# Case 3: Looking specifically at Diesel Vehicles
# Train the model on the entire data-set using k-fold cross-validation
Diesel_Cars_cv <- train(PM2.5_Avg ~ DIESEL + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(Diesel_Cars_cv)
PM2.5_Avg <- County_PM2.5_Transportation_Data$PM2.5_Avg
Gas <- County_PM2.5_Transportation_Data$GAS
Diesel <- County_PM2.5_Transportation_Data$DIESEL
Electric <- County_PM2.5_Transportation_Data$ELECTRIC
Propane <- County_PM2.5_Transportation_Data$PROPANE
Hybrid <- County_PM2.5_Transportation_Data$HYBRID
NaturalGas <- County_PM2.5_Transportation_Data$NATURAL.GAS
CompGas <- County_PM2.5_Transportation_Data$COMP.GAS
FlexFuel <- County_PM2.5_Transportation_Data$FLEX.FUEL
Vehicles <- County_PM2.5_Transportation_Data$VEHICLES
PACounty <- County_PM2.5_Transportation_Data$COUNTY
Year <- County_PM2.5_Transportation_Data$YEAR
# Fit the linear regression model
emission_significance_transport <- lm(PM2.5_Avg ~ Diesel + factor(PACounty) + factor (Year), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
emission_significance_transport <- lm(PM2.5_Avg ~ Gas + Diesel + Electric + Propane + Hybrid + NaturalGas + CompGas + FlexFuel + factor(PACounty), data = County_PM2.5_Transportation_Data)
summary(emission_significance_transport)
# Set seed for reproducibility
set.seed(123)
# Generate random indices for splitting data into train and test sets
train_indices <- sample(1:nrow(County_PM2.5_Transportation_Data), 0.8 * nrow(County_PM2.5_Transportation_Data))
# Create train and test data sets
train_data <- County_PM2.5_Transportation_Data[train_indices, ]
test_data <- County_PM2.5_Transportation_Data[-train_indices, ]
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set
AllVehicles <- lm(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR), data = train_data)
summary(AllVehicles)
# Calculate MSE
predicted_PM2.5_allvehicles <- predict(AllVehicles, newdata = test_data)
mse_allegheny_all <- mean((predicted_PM2.5_allvehicles - test_data$PM2.5_Avg)^2)
print(mse_allegheny_all)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(AllVehicles, newdata = data.frame(VEHICLES = c(855788, 855789), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate PM2.5 values for an addition of 1 car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
# Case 2: Looking specifically at Gas, Diesel and Electric Vehicles
# Train the model on the entire data-set
GDE <- lm(PM2.5_Avg ~ GAS + DIESEL + ELECTRIC + factor(COUNTY)+ factor(YEAR), data = train_data)
summary(GDE)
# Calculate MSE
predicted_PM2.5_allegheny_GDE <- predict(GDE, newdata = test_data)
mse_allegheny_GDE <- mean((predicted_PM2.5_allegheny_GDE - test_data$PM2.5_Avg)^2, na.rm=TRUE)
print(mse_allegheny_GDE)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(GDE, newdata = data.frame(GAS = c(811383, 811384), DIESEL = c(20091, 20092), ELECTRIC = c(4574,4575), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate PM2.5 values for an addition of 1 gas, 1 diesel and 1 electric car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
# Case 3: Looking specifically at Diesel Vehicles
# Train the model on the entire data-set
Diesel_Cars <- lm(PM2.5_Avg ~ DIESEL + factor(COUNTY) + factor(YEAR), data = train_data)
summary(Diesel_Cars)
# Calculate MSE
predicted_PM2.5_allegheny_diesel <- predict(Diesel_Cars, newdata = test_data)
mse_allegheny_diesel <- mean((predicted_PM2.5_allegheny_diesel - test_data$PM2.5_Avg)^2)
print(mse_allegheny_diesel)
# Predict PM2.5 levels for different number of cars in Allegheny County
predicted_PM2.5 <- predict(Diesel_Cars, newdata = data.frame(DIESEL = c(20091, 20092), COUNTY = "Allegheny", YEAR = "2022"))
# Calculate the difference between predicted PM2.5 values to get the PM2.5 for an addition of 1 diesel car
difference <- predicted_PM2.5[2] - predicted_PM2.5[1]
print(difference)
#k-fold Cross validation
# Load the caret package
library(caret)
County_PM2.5_Transportation_Data <- na.omit(County_PM2.5_Transportation_Data)
# Define the number of folds for cross-validation
num_folds <- 10
# Define the control parameters for cross-validation
train_control <- trainControl(method = "cv",   # Use k-fold cross-validation
number = num_folds)  # Number of folds
# Case 1: Looking at all the vehicles
# Train the model on the entire data-set using k-fold cross-validation
AllVehicles_cv <- train(PM2.5_Avg ~ VEHICLES + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(AllVehicles_cv)
# Case 2: Looking specifically at Gas, Diesel, and Electric Vehicles
# Train the model on the entire data-set using k-fold cross-validation
GDE_cv <- train(PM2.5_Avg ~ GAS + DIESEL + ELECTRIC + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(GDE_cv)
# Case 3: Looking specifically at Diesel Vehicles
# Train the model on the entire data-set using k-fold cross-validation
Diesel_Cars_cv <- train(PM2.5_Avg ~ DIESEL + factor(COUNTY) + factor(YEAR),
data = County_PM2.5_Transportation_Data,
method = "lm",
trControl = train_control)
# Print the results
print(Diesel_Cars_cv)
# Visualizing Gas vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Gas), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Gas), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Gas vs. PM2.5_Avg", x = "Log(Gas)", y = "PM2.5_Avg")
# Visualizing Diesel vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Diesel), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Diesel), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Diesel vs. PM2.5_Avg", x = "Log(Diesel)", y = "PM2.5_Avg")
# Visualizing Electric vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Electric), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Electric), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Electric vs. PM2.5_Avg", x = "Log(Electric)", y = "PM2.5_Avg")
# Visualizing Vehicles vs. PM2.5_Avg with color based on year
ggplot(County_PM2.5_Transportation_Data) +
geom_point(aes(x = log(Vehicles), y = PM2.5_Avg, color = as.factor(YEAR))) +
geom_smooth(aes(x = log(Vehicles), y = PM2.5_Avg, color = as.factor(YEAR))) +
labs(title = "Vehicles vs. PM2.5_Avg", x = "Log(Vehicles)", y = "PM2.5_Avg")
